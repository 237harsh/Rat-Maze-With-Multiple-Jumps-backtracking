bool dfs(vector<vector<int>>&m, vector<vector<int>>&res, int i, int j, int n){
       if(i>=n||j>=n) return false;
       
       if(i==n-1&&j==n-1){
           res[i][j]=1;
           return true;
       }
       res[i][j]=1;
     
       for(int d=1;d<=m[i][j];d++)
       {
           if(dfs(m,res,i,j+d,n))return true;
            if(dfs(m,res,i+d,j,n))return true;
       }
       res[i][j]=0;
      
       return false;
   }
   
vector<vector<int>> ShortestDistance(vector<vector<int>>&matrix){
   // Code here
   int n=matrix.size();
   vector<vector<int>> res(n,vector<int>(n,0));
   vector<vector<int>> ans(1);
   ans[0].push_back(-1);
   if(matrix[0][0]==0&&n>1) return ans;
   if(dfs(matrix, res,0,0,n)) return res;
   
   return ans;
}

https://practice.geeksforgeeks.org/problems/rat-maze-with-multiple-jumps3852/1/?page=1&category[]=Backtracking&sortBy=submissions#
